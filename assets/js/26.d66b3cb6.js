(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{206:function(e,t,v){"use strict";v.r(t);var o=v(6),_=Object(o.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"js系列试题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js系列试题"}},[e._v("#")]),e._v(" JS系列试题")]),e._v(" "),v("p",[e._v("变量声明原因")]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("变量提升")]),e._v("的原因：在执行上下文创建阶段，函数声明存储在环境中，而变量会被设置为 "),v("code",[e._v("undefined")]),e._v("（在 "),v("code",[e._v("var")]),e._v(" 的情况下）或保持未初始化（在 "),v("code",[e._v("let")]),e._v(" 和 "),v("code",[e._v("const")]),e._v(" 的情况下）。所以这就是为什么可以在声明之前访问 "),v("code",[e._v("var")]),e._v(" 定义的变量（尽管是 "),v("code",[e._v("undefined")]),e._v(" ），但如果在声明之前访问 "),v("code",[e._v("let")]),e._v(" 和 "),v("code",[e._v("const")]),e._v(" 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。")])])])}),[],!1,null,null,null);t.default=_.exports}}]);